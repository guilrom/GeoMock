// Generated by CoffeeScript 1.9.1

/*
(c) 2011 Jan Monschke
v1.0.1
GeoMock is licensed under the MIT license.
 */

(function() {
  window.GeoMock = {
    _backup: {},
    _adding: ['delay', 'shouldFail', 'failsAt', 'errorMessage', 'waypoints', '_geoCall'],
    _replacing: ['getCurrentPosition', 'watchPosition', 'clearWatch'],
    _watchIds: [],
    install: function() {
      var attr, i, len, ref;
      if (typeof navigator === "undefined" || navigator === null) {
        window.navigator = {};
      }
      if (navigator.geolocation == null) {
        window.navigator.geolocation = {};
      }
      ref = this._replacing;
      for (i = 0, len = ref.length; i < len; i++) {
        attr = ref[i];
        this._backup[attr] = navigator.geolocation[attr];
      }
      GeoMock._geolocation = navigator.geolocation;
      navigator.geolocation = {};
      navigator.geolocation.delay = 1000;
      navigator.geolocation.shouldFail = false;
      navigator.geolocation.failsAt = -1;
      navigator.geolocation.errorMessage = "There was an error retrieving the position!";
      navigator.geolocation.currentTimeout = -1;
      navigator.geolocation.lastPosReturned = 0;
      navigator.geolocation._sanitizeLastReturned = function() {
        if (this.lastPosReturned > this.waypoints.length - 1) {
          return this.lastPosReturned = 0;
        }
      };
      navigator.geolocation._geoCall = function(method, success, error) {
        if (this.shouldFail && (error != null)) {
          this.currentTimeout = window[method].call(null, (function(_this) {
            return function() {
              return error(_this.errorMessage);
            };
          })(this), this.delay);
          return GeoMock._watchIds.push(this.currentTimeout);
        } else {
          if (success != null) {
            this.currentTimeout = window[method].call(null, (function(_this) {
              return function() {
                success(_this.waypoints[_this.lastPosReturned++]);
                return _this._sanitizeLastReturned();
              };
            })(this), this.delay);
            return GeoMock._watchIds.push(this.currentTimeout);
          }
        }
      };
      navigator.geolocation.getCurrentPosition = function(success, error) {
        return this._geoCall("setTimeout", success, error);
      };
      navigator.geolocation.watchPosition = function(success, error) {
        this._geoCall("setInterval", success, error);
        return this.currentTimeout;
      };
      navigator.geolocation.clearWatch = function(id) {
        return clearInterval(id);
      };
      return navigator.geolocation.waypoints = [
        {
          coords: {
            latitude: 52.5168,
            longitude: 13.3889,
            accuracy: 1500
          }
        }, {
          coords: {
            latitude: 52.5162,
            longitude: 13.3890,
            accuracy: 1334
          }
        }, {
          coords: {
            latitude: 52.5154,
            longitude: 13.3890,
            accuracy: 631
          }
        }, {
          coords: {
            latitude: 52.5150,
            longitude: 13.3890,
            accuracy: 361
          }
        }, {
          coords: {
            latitude: 52.5144,
            longitude: 13.3890,
            accuracy: 150
          }
        }, {
          coords: {
            latitude: 52.5138,
            longitude: 13.3890,
            accuracy: 65
          }
        }, {
          coords: {
            latitude: 52.5138,
            longitude: 13.3895,
            accuracy: 65
          }
        }, {
          coords: {
            latitude: 52.5139,
            longitude: 13.3899,
            accuracy: 65
          }
        }, {
          coords: {
            latitude: 52.5140,
            longitude: 13.3906,
            accuracy: 65
          }
        }, {
          coords: {
            latitude: 52.5140,
            longitude: 13.3910,
            accuracy: 65
          }
        }
      ];
    },
    uninstall: function() {
      var attr, i, id, j, k, len, len1, len2, ref, ref1, ref2, results;
      if (GeoMock._geolocation) {
        ref = this._replacing;
        for (i = 0, len = ref.length; i < len; i++) {
          attr = ref[i];
          navigator.geolocation[attr] = this._backup[attr];
        }
        ref1 = this._adding;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          attr = ref1[j];
          delete navigator.geolocation[attr];
        }
        ref2 = this._watchIds;
        results = [];
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          id = ref2[k];
          clearInterval(id);
          results.push(clearTimeout(id));
        }
        return results;
      }
    }
  };

}).call(this);
